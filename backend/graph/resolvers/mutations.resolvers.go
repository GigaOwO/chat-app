package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"api/graph/generated"
	"api/graph/model"
	"api/usecases/auth"
	"context"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUpInput) (*model.AuthResponse, error) {
	usecaseInput := auth.SignUpInput{
		Username: input.Username,
		Email:    input.Email,
		Password: input.Password,
	}

	result, err := r.SignUpInteractor.SignUp(usecaseInput)
	if err != nil {
		return &model.AuthResponse{
			Success: false,
			Message: err.Error(),
		}, nil
	}

	return &model.AuthResponse{
		Success: result.Success,
		Message: result.Message,
	}, nil
}

// ConfirmSignUp is the resolver for the confirmSignUp field.
func (r *mutationResolver) ConfirmSignUp(ctx context.Context, input model.ConfirmSignUpInput) (*model.AuthResponse, error) {
	usecaseInput := auth.ConfirmSignUpInput{
		Username:         input.Username,
		Email:            input.Email,
		ConfirmationCode: input.ConfirmationCode,
	}

	result, err := r.ConfirmSignUpInteractor.ConfirmSignUp(usecaseInput)
	if err != nil {
		return &model.AuthResponse{
			Success: false,
			Message: err.Error(),
		}, nil
	}

	return &model.AuthResponse{
		Success: result.Success,
		Message: result.Message,
	}, nil
}

// ResendConfirmationCode is the resolver for the resendConfirmationCode field.
func (r *mutationResolver) ResendConfirmationCode(ctx context.Context, email string) (*model.AuthResponse, error) {
	usecaseInput := auth.ResendConfirmationCodeInput{
		Email: email,
	}

	result, err := r.ResendConfirmationCodeInteractor.ResendConfirmationCode(usecaseInput)
	if err != nil {
		return &model.AuthResponse{
			Success: false,
			Message: err.Error(),
		}, nil
	}

	return &model.AuthResponse{
		Success: result.Success,
		Message: "Confirmation code sent successfully",
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
